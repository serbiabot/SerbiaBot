from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from db import enums
from db.models import SearchOption
from utils.general import filtered_enum, get_user, filtered_room_enum


async def kb_menu(data):
    language, row = data['language'], []
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üíÅ‚Äç‚ôÄÔ∏è' if language == enums.Language.Ru else 'Welcome to main menu üíÅ‚Äç‚ôÄÔ∏è'
    for enum_item in filtered_enum(enums.Menu, language):
        row.append(KeyboardButton(enum_item.value))
        if len(row) == 2:
            markup.row(*row)
            row = []
    return markup, text


async def kb_languages(lang=None):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    text = '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫' if lang == enums.OptionsMenu.RU_LANGUAGE.value else 'Choose language'
    but1 = KeyboardButton('–†—É—Å—Å–∫–∏–π üá∑üá∫')
    but2 = KeyboardButton('English üá¨üáß')
    markup.row(but1, but2)
    return markup, text


async def kb_cities(data):
    language, row = data['language'], []
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ üè®' if language == enums.Language.Ru else 'Choose city üè®'
    for enum_item in filtered_enum(enums.Cities, language):
        row.append(KeyboardButton(enum_item.value))
        if len(row) == 2:
            markup.row(*row)
            row = []
    return markup, text


async def kb_rooms(data):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    language, row = data['language'], []
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç' if language == enums.Language.Ru else 'Choose numbers of rooms'
    for enum_item in filtered_room_enum(enums.Rooms, data['home_type']):
        row.append(KeyboardButton(enum_item.value))
        if len(row) == 2:
            markup.row(*row)
            row = []
    return markup, text


async def kb_price_type(data):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    language, row = data['language'], []
    text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' if language == enums.Language.Ru else 'Choose type of price'
    for enum_item in filtered_enum(enums.PriceType, language):
        row.append(KeyboardButton(enum_item.value))
        if len(row) == 2:
            markup.row(*row)
            row = []
    markup.row(KeyboardButton('–Ω–∞–∑–∞–¥' if language == enums.Language.Ru else 'back'))
    return markup, text


async def kb_price(data):
    markup = ReplyKeyboardMarkup()
    language = data['language']

    if 'min_price' not in data:
        text = 'üí∂ –û—Ç –∫–∞–∫–æ–π —Å—É–º–º—ã –∏—Å–∫–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (–ø–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)? (‚Ç¨)' if language == enums.Language.Ru \
            else 'üí∂ From what amount to look for real estate? (‚Ç¨)'
        return markup, text
    if 'max_price' not in data:
        text = 'üí∂ –î–æ –∫–∞–∫–æ–π —Å—É–º–º—ã –∏—Å–∫–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å? (‚Ç¨)' if language == enums.Language.Ru \
            else 'üí∂ Up to what amount to look for real estate? (‚Ç¨)'
        return markup, text


async def kb_price_m2(data):
    markup = ReplyKeyboardMarkup()
    language = data['language']

    if 'min_price_m2' not in data:
        text = 'üí∂üìê –£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –º2? (‚Ç¨)' if language == enums.Language.Ru \
            else 'üí∂üìê Specify the minimum price per m2? (‚Ç¨)'
        return markup, text
    if 'max_price_m2' not in data:
        text = 'üí∂üìê –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ –º2? (‚Ç¨)' if language == enums.Language.Ru \
            else 'üí∂üìê Specify the maximum price per m2? (‚Ç¨)'
        return markup, text


async def kb_area(data):
    markup = ReplyKeyboardMarkup()
    language = data['language']

    if 'min_area' not in data:
        text = '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å üìê –≤ m2' \
            if language == enums.Language.Ru else 'Enter the minimum area üìê in m2'
        return markup, text
    if 'max_area' not in data:
        text = '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å üìê' if language == enums.Language.Ru.value \
            else 'Enter the maximum areas üìê'
        return markup, text


async def kb_home_type(data):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    language, row = data['language'], []
    text = '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ üè°' if language == enums.Language.Ru else 'Choose a property type üè°'
    for enum_item in filtered_enum(enums.RealEstate, language):
        row.append(KeyboardButton(enum_item.value))
        if len(row) == 2:
            markup.row(*row)
            row = []
    return markup, text


async def kb_condition(data):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    language, row = data['language'], []
    text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∂–∏–ª—å—è' if language == enums.Language.Ru else 'Choose condition of property'
    for enum_item in filtered_enum(enums.PropertyCondition, language):
        row.append(KeyboardButton(enum_item.value))
    markup.row(*row)
    return markup, text


async def kb_auth_menu(user):
    markup, row = ReplyKeyboardMarkup(resize_keyboard=True), []
    text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' if user.language == enums.Language.Ru else 'Welcome to main menu'
    Enum = enums.Menu if user.renew_data else enums.MenuContinue
    for enum_item in filtered_enum(Enum, user.language):
        row.append(KeyboardButton(enum_item.value))
        if len(row) == 2:
            markup.row(*row)
            row = []
    return markup, text


async def kb_options_menu(user):
    option: SearchOption = get_user(user.chat_id).search_options
    markup, row = ReplyKeyboardMarkup(resize_keyboard=True), []
    RU = True if user.language == enums.Language.Ru else False

    text = [
        '‚öôÔ∏è –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
        f'*—è–∑—ã–∫*: {user.language}',
        f'{option.city}, {option.real_estate_type}, {option.rooms}-–∫–æ–º–Ω.',
        f'‚Ä¢ –¶–µ–Ω–∞:  `{option.min_price}-{option.max_price}` ‚Ç¨',
        f'‚Ä¢ –¶–µ–Ω–∞\–º2:  `{option.min_price_m2}-{option.max_price_m2}` ‚Ç¨\m2',
        f'‚Ä¢ –ü–ª–æ—â–∞–¥—å:  `{option.min_area}-{option.max_area}` m2',
        f'‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∂–∏–ª—å—è: {option.condition}',
        f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã üîî' if user.notifications else '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤—ã–∫–ª—é—á–µ–Ω—ã üîï'
    ] if user.language == enums.Language.Ru else [
        '‚öôÔ∏è Your parametrs',
        f'*language*: {user.language}',
        f'{option.city}, {option.real_estate_type}, {option.rooms}-rooms',
        f'‚Ä¢ Price:  `{option.min_price}-{option.max_price}` ‚Ç¨',
        f'‚Ä¢ Price\–º2:  `{option.min_price_m2}-{option.max_price_m2}` ‚Ç¨\m2',
        f'‚Ä¢ Areas:  `{option.min_area}-{option.max_area}` m2',
        f'‚Ä¢ Property condition: {option.condition}',
        f'*Notifications*: on üîî' if user.notifications else '*Notifications*: off üîï'
    ]

    for enum_item in filtered_enum(enums.OptionsMenu, user.language):
        row.append(KeyboardButton(enum_item.value))
        if len(row) == 2:
            markup.row(*row)
            row = []
    markup.row(KeyboardButton('—Å–ø—Ä–∞–≤–∫–∞' if RU else 'note'), KeyboardButton('–Ω–∞–∑–∞–¥' if RU else 'back'))
    return markup, text


async def kb_admin():
    set_adv_button = KeyboardButton(enums.AdminPanel.RU_SET_ADVERTISING.value)
    see_adv_button = KeyboardButton(enums.AdminPanel.RU_SEE_ADVERTISING.value)
    button_back = KeyboardButton('–Ω–∞–∑–∞–¥')
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(set_adv_button)
    markup.add(see_adv_button)
    markup.add(button_back)
    return markup
